import sys
import os
from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, 
                            QTableWidget, QTableWidgetItem, QLabel, QPushButton, QTextEdit,
                            QGroupBox, QSplitter, QHeaderView, QFileDialog, QMessageBox)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QColor
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from collections import Counter
import re

class AnalysisWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Аналіз символьних даних")
        self.setGeometry(100, 100, 800, 600)
        self.setStyleSheet("background-color: #f5f5f5;")
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QVBoxLayout(self.central_widget)
        self.create_input_area()
        self.create_results_area()
        self.results_widget.setVisible(False)
        self.current_file_path = None

    def create_input_area(self):
        input_group = QGroupBox("Введіть текст для аналізу")
        input_group.setStyleSheet("QGroupBox { font-weight: bold; }")
        
        input_layout = QVBoxLayout()
        
        self.text_input = QTextEdit()
        self.text_input.setPlaceholderText("Введіть текст тут або завантажте файл...")
        self.text_input.setMinimumHeight(100)
        
        button_layout = QHBoxLayout()
        
        self.analyze_button = QPushButton("Аналізувати")
        self.analyze_button.setStyleSheet("background-color: #4CAF50; color: white;")
        self.analyze_button.clicked.connect(self.on_analyze_clicked)
        
        self.clear_button = QPushButton("Очистити")
        self.clear_button.setStyleSheet("background-color: #f44336; color: white;")
        self.clear_button.clicked.connect(self.on_clear_clicked)
        
        self.load_file_button = QPushButton("Завантажити файл")
        self.load_file_button.setStyleSheet("background-color: #2196F3; color: white;")
        self.load_file_button.clicked.connect(self.on_load_file_clicked)
        
        button_layout.addWidget(self.analyze_button)
        button_layout.addWidget(self.clear_button)
        button_layout.addWidget(self.load_file_button)
        button_layout.addStretch()
        
        self.file_info_label = QLabel("Файл не завантажено")
        self.file_info_label.setStyleSheet("color: #666666; font-style: italic;")
        
        input_layout.addWidget(self.text_input)
        input_layout.addLayout(button_layout)
        input_layout.addWidget(self.file_info_label)
        input_group.setLayout(input_layout)
        
        self.main_layout.addWidget(input_group)

    def create_results_area(self):
        self.results_widget = QWidget()
        results_layout = QVBoxLayout(self.results_widget)
        
        results_header = QLabel("Результати аналізу")
        results_header.setAlignment(Qt.AlignCenter)
        results_header.setStyleSheet("font-size: 16px; font-weight: bold;")
        results_layout.addWidget(results_header)
        
        self.text_info_label = QLabel()
        self.text_info_label.setAlignment(Qt.AlignCenter)
        results_layout.addWidget(self.text_info_label)
        
        splitter = QSplitter(Qt.Vertical)
        
        table_group = QGroupBox("Статистика символів")
        table_group.setStyleSheet("QGroupBox { font-weight: bold; }")
        
        table_layout = QVBoxLayout()
        
        self.table = QTableWidget()
        self.table.setColumnCount(3)
        self.table.setHorizontalHeaderLabels(["Символ", "Кількість (ki)", "Частота (Pn)"])
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        
        self.extremes_layout = QVBoxLayout()
        self.min_label = QLabel()
        self.max_label = QLabel()
        self.min_label.setStyleSheet("font-weight: bold; color: #d32f2f;")
        self.max_label.setStyleSheet("font-weight: bold; color: #388e3c;")
        
        self.extremes_layout.addWidget(self.min_label)
        self.extremes_layout.addWidget(self.max_label)
        
        table_layout.addWidget(self.table)
        table_layout.addLayout(self.extremes_layout)
        table_group.setLayout(table_layout)
        
        histogram_group = QGroupBox("Гістограма розподілу символів")
        histogram_group.setStyleSheet("QGroupBox { font-weight: bold; }")
        
        histogram_layout = QVBoxLayout()
        self.figure, self.ax = plt.subplots(figsize=(8, 4))
        self.canvas = FigureCanvas(self.figure)
        histogram_layout.addWidget(self.canvas)
        histogram_group.setLayout(histogram_layout)
        
        splitter.addWidget(table_group)
        splitter.addWidget(histogram_group)
        
        results_layout.addWidget(splitter)
        self.main_layout.addWidget(self.results_widget)

    def on_analyze_clicked(self):
        text = self.text_input.toPlainText()
        if not text:
            QMessageBox.warning(self, "Попередження", "Введіть текст або завантажте файл для аналізу!")
            return
            
        self.analyze_text(text)
        self.update_table()
        self.update_extremes()
        self.update_histogram()
        
        if self.current_file_path:
            file_name = os.path.basename(self.current_file_path)
            self.text_info_label.setText(f"Аналіз файлу: {file_name} (Кількість символів: {self.total_chars})")
        else:
            self.text_info_label.setText(f"Аналіз введеного тексту (Кількість символів: {self.total_chars})")
        
        self.results_widget.setVisible(True)

    def on_clear_clicked(self):
        self.text_input.clear()
        self.results_widget.setVisible(False)
        self.current_file_path = None
        self.file_info_label.setText("Файл не завантажено")

    def on_load_file_clicked(self):
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(
            self, 
            "Завантажити файл", 
            "", 
            "Текстові файли (*.txt)",
            options=options
        )
        
        if file_path:
            try:
                encodings = ['utf-8', 'cp1251', 'latin-1']
                file_content = None
                
                for encoding in encodings:
                    try:
                        with open(file_path, 'r', encoding=encoding) as file:
                            file_content = file.read()
                            break
                    except UnicodeDecodeError:
                        continue
                
                if file_content is None:
                    QMessageBox.critical(self, "Помилка", "Не вдалося прочитати файл.")
                    return
                
                self.text_input.setText(file_content)
                self.current_file_path = file_path
                
                file_name = os.path.basename(file_path)
                self.file_info_label.setText(f"Завантажено: {file_name}")
                
                self.on_analyze_clicked()
                
            except Exception as e:
                QMessageBox.critical(self, "Помилка", f"Помилка при завантаженні файлу: {str(e)}")

    def analyze_text(self, text):
        filtered_text = re.findall(r'[a-zA-Zа-яА-ЯіІїЇєЄґҐ0-9]', text)
        
        self.total_chars = len(filtered_text)
        self.char_count = Counter(filtered_text)

        if self.total_chars > 0:
            self.pn_values = {char: count / self.total_chars for char, count in self.char_count.items()}
            
            if self.pn_values:
                self.pn_min = min(self.pn_values.values())
                self.pn_max = max(self.pn_values.values())
                self.min_symbols = [char for char, pn in self.pn_values.items() if pn == self.pn_min]
                self.max_symbols = [char for char, pn in self.pn_values.items() if pn == self.pn_max]
        else:
            self.pn_values = {}
            self.pn_min = 0
            self.pn_max = 0
            self.min_symbols = []
            self.max_symbols = []

    def update_table(self):
        self.table.setRowCount(0)
        
        sorted_chars = sorted(self.char_count.items(), key=lambda x: x[1], reverse=True)
        
        self.table.setRowCount(len(sorted_chars))
        for i, (char, count) in enumerate(sorted_chars):
            symbol_item = QTableWidgetItem(char)
            symbol_item.setTextAlignment(Qt.AlignCenter)
            
            count_item = QTableWidgetItem(str(count))
            count_item.setTextAlignment(Qt.AlignCenter)
            
            pn = self.pn_values[char]
            pn_item = QTableWidgetItem(f"{pn:.6f}")
            pn_item.setTextAlignment(Qt.AlignCenter)
            
            if pn == self.pn_min:
                symbol_item.setBackground(QColor(255, 200, 200))
                count_item.setBackground(QColor(255, 200, 200))
                pn_item.setBackground(QColor(255, 200, 200))
            elif pn == self.pn_max:
                symbol_item.setBackground(QColor(200, 255, 200))
                count_item.setBackground(QColor(200, 255, 200))
                pn_item.setBackground(QColor(200, 255, 200))
            
            self.table.setItem(i, 0, symbol_item)
            self.table.setItem(i, 1, count_item)
            self.table.setItem(i, 2, pn_item)

    def update_extremes(self):
        min_symbols_str = ", ".join([f"'{s}'" for s in self.min_symbols])
        max_symbols_str = ", ".join([f"'{s}'" for s in self.max_symbols])
        
        self.min_label.setText(f"Мінімальна частота (Pn_min): {self.pn_min:.6f} (Символи: {min_symbols_str})")
        self.max_label.setText(f"Максимальна частота (Pn_max): {self.pn_max:.6f} (Символи: {max_symbols_str})")

    def update_histogram(self):
        self.ax.clear()
        
        max_chars_to_display = 20
        sorted_chars = sorted(self.char_count.items(), key=lambda x: x[1], reverse=True)
        
        if len(sorted_chars) > max_chars_to_display:
            display_chars = sorted_chars[:max_chars_to_display]
            self.ax.set_title(f"Розподіл символів (показано {max_chars_to_display} найчастіших)")
        else:
            display_chars = sorted_chars
            self.ax.set_title("Розподіл символів")
        
        symbols = [char for char, _ in display_chars]
        frequencies = [self.pn_values[char] for char, _ in display_chars]
        
        colors = ['#2196F3'] * len(symbols)
        
        for i, (char, _) in enumerate(display_chars):
            if self.pn_values[char] == self.pn_min:
                colors[i] = '#F44336' 
            elif self.pn_values[char] == self.pn_max:
                colors[i] = '#4CAF50' 
        
        self.ax.bar(symbols, frequencies, color=colors)
        
        self.ax.set_xlabel("Символи")
        self.ax.set_ylabel("Частота (Pn)")
        self.ax.tick_params(axis='x', rotation=45)
        self.ax.grid(axis='y', linestyle='--', alpha=0.7)
        
        self.figure.tight_layout()
        self.canvas.draw()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    window = AnalysisWindow()
    window.show()
    sys.exit(app.exec_())
